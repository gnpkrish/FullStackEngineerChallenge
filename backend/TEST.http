@hostname = localhost
@port = 3000
@host = {{hostname}}:{{port}}
@contentType = application/json
###
# @name graphqli
GET http://{{host}}/


###
# @name register
POST http://{{host}}/api/user/register HTTP/1.1
Content-Type: {{contentType}}

{
    "first_name": "Narayanaperumal",
    "last_name": "G",
    "email": "ng2@ers.net",
    "password": "password",
    "role": "Employee"
}

###
# @name login
POST http://{{host}}/api/user/login HTTP/1.1
Content-Type: {{contentType}}

{
    "email": "admin@ers.net",
    "password": "q1w2e3r$"
}

###
# @name getMyAccount
GET http://{{host}}/api/user/me HTTP/1.1


###
# @name getJwtToken
POST http://{{host}}/graphql HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

query tokenQuery {
    generateToken {
        bearer
    }
}

###
# @name decodeJwtToken

@jwtToken = {{getJwtToken.response.body.$.data.generateToken.bearer}}

POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

query decodeTokenQuery {
    decodeToken {
        email
        iss
        iat
        exp
        sub
    }
}

###
# @name listUsers
POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

query ListUsers {
    users {
        id
        email
        firstName
        lastName
        role
        createdAt
    }
}

###
# @name updateUser
POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

mutation{
  updateUser(userId:"91d1eccf-f1e4-480e-9649-0535f1f661d9", firstName: "Narayana"){
    id
    firstName
  }
}

###
# @name deleteUser
# @return "message": "LIMIT must not be negative"
POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

mutation delete_user {
  deleteUser(userId: "2dca1f1f-efd5-4261-9967-145d36d1cc2c") {
  email
}
}



###
# @name logout
GET http://{{host}}/user/logout HTTP/1.1

###

###
# @name creaetFeedback
@userId = {{getMyAccount.response.body.$.id}}
POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

mutation Feedback {
    createFeedback(data:{userId: "0c97fc08-8b20-49e2-866f-37a15dbeab8f", feedback: "feedback2"}) {
       id
       userId
       feedback
    }
}

###

###
# @name findFeedback
POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

query Feedback {
    getFeedbackById(feedbackId: "edc1ddbd-f547-4652-853b-5bfb25ff3e18") {
        id
       feedback
       participants{
           id,
           firstName
       }
    }
}

###
# @name addParticipants
POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

mutation Participant {
    assignParticipant(data:{feedbackId: "edc1ddbd-f547-4652-853b-5bfb25ff3e18", userId:"3176bc05-e9e7-44f9-94f1-25109ca9b7f4"}) {
        userId
    }
}

###
# @name addComment
@feedbackId = {{creaetFeedback.response.body.$.data.createFeedback.id}}
@userId = {{creaetFeedback.response.body.$.data.createFeedback.userId}}
POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

mutation{
    createComment(data:{
        feedbackId: "{{feedbackId}}",
        userId: "{{userId}}",
        body: "comment1"
        }) {
        id
        body
    }
}

###
# @name filterComments
POST http://{{host}}/graphql HTTP/1.1
Authorization: Bearer {{jwtToken}}
Content-Type: {{contentType}}
X-REQUEST-TYPE: GraphQL

query {
    commentsForFeedback(feedbackId: "ce0accdf-8dad-4ed1-af8f-51f2cd441625") {
        id
        user{
            id
            firstName
            lastName
        }
        feedback{
            id
            feedback
        }
        body
    }
}

###